#cloud-config

package_update: true
package_upgrade: true

apt:
  sources:
    docker:
      source: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable' 
      key: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        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
        YT90qFF93M3v01BbxP+EIY2/9tiIPbrd
        =0YYh
        -----END PGP PUBLIC KEY BLOCK-----

chpasswd:
  list: |
    root:${root_pw}
  expire: False

packages:
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - docker-ce 
  - docker-ce-cli 
  - containerd.io 
  - docker-compose-plugin

users:
  - default
  - name: mailcow
    primary_group: mailcow
    groups: docker
    passwd: ${mailcow_pw}
    homedir: /opt/mailcow
    shell: /bin/sh

write_files:
  - path: /tmp/mailcow.conf
    content: |
      # ------------------------------
      # mailcow web ui configuration
      # ------------------------------
      # example.org is _not_ a valid hostname, use a fqdn here.
      # Default admin user is "admin"
      # Default password is "moohoo"

      MAILCOW_HOSTNAME=mail.goinput.de

      # Password hash algorithm
      # Only certain password hash algorithm are supported. For a fully list of supported schemes,
      # see https://mailcow.github.io/mailcow-dockerized-docs/models/model-passwd/
      MAILCOW_PASS_SCHEME=BLF-CRYPT

      # ------------------------------
      # SQL database configuration
      # ------------------------------

      DBNAME=mailcow
      DBUSER=mailcow

      # Please use long, random alphanumeric strings (A-Za-z0-9)

      DBPASS=kh80g2lpmtM6mxZEtqpWdAHxv59Z
      DBROOT=witshB4B5uqYgPQm1diX9PjEUIqD

      # ------------------------------
      # HTTP/S Bindings
      # ------------------------------

      # You should use HTTPS, but in case of SSL offloaded reverse proxies:
      # Might be important: This will also change the binding within the container.
      # If you use a proxy within Docker, point it to the ports you set below.
      # Do _not_ use IP:PORT in HTTP(S)_BIND or HTTP(S)_PORT
      # IMPORTANT: Do not use port 8081, 9081 or 65510!
      # Example: HTTP_BIND=1.2.3.4
      # For IPv4 and IPv6 leave it empty: HTTP_BIND= & HTTPS_PORT=
      # For IPv6 see https://mailcow.github.io/mailcow-dockerized-docs/post_installation/firststeps-ip_bindings/

      HTTP_PORT=80
      HTTP_BIND=

      HTTPS_PORT=443
      HTTPS_BIND=

      # ------------------------------
      # Other bindings
      # ------------------------------
      # You should leave that alone
      # Format: 11.22.33.44:25 or 12.34.56.78:465 etc.

      SMTP_PORT=25
      SMTPS_PORT=465
      SUBMISSION_PORT=587
      IMAP_PORT=143
      IMAPS_PORT=993
      POP_PORT=110
      POPS_PORT=995
      SIEVE_PORT=4190
      DOVEADM_PORT=127.0.0.1:19991
      SQL_PORT=127.0.0.1:13306
      SOLR_PORT=127.0.0.1:18983
      REDIS_PORT=127.0.0.1:7654

      # Your timezone
      # See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of timezones
      # Use the row named 'TZ database name' + pay attention for 'Notes' row

      TZ=Europe/Berlin

      # Fixed project name
      # Please use lowercase letters only

      COMPOSE_PROJECT_NAME=mailcowdockerized

      # Set this to "allow" to enable the anyone pseudo user. Disabled by default.
      # When enabled, ACL can be created, that apply to "All authenticated users"
      # This should probably only be activated on mail hosts, that are used exclusivly by one organisation.
      # Otherwise a user might share data with too many other users.
      ACL_ANYONE=disallow

      # Garbage collector cleanup
      # Deleted domains and mailboxes are moved to /var/vmail/_garbage/timestamp_sanitizedstring
      # How long should objects remain in the garbage until they are being deleted? (value in minutes)
      # Check interval is hourly

      MAILDIR_GC_TIME=7200

      # Additional SAN for the certificate
      #
      # You can use wildcard records to create specific names for every domain you add to mailcow.
      # Example: Add domains "example.com" and "example.net" to mailcow, change ADDITIONAL_SAN to a value like:
      #ADDITIONAL_SAN=imap.*,smtp.*
      # This will expand the certificate to "imap.example.com", "smtp.example.com", "imap.example.net", "smtp.example.net"
      # plus every domain you add in the future.
      #
      # You can also just add static names...
      #ADDITIONAL_SAN=srv1.example.net
      # ...or combine wildcard and static names:
      #ADDITIONAL_SAN=imap.*,srv1.example.com
      #

      ADDITIONAL_SAN=

      # Additional server names for mailcow UI
      #
      # Specify alternative addresses for the mailcow UI to respond to
      # This is useful when you set mail.* as ADDITIONAL_SAN and want to make sure mail.maildomain.com will always point to the mailcow UI.
      # If the server name does not match a known site, Nginx decides by best-guess and may redirect users to the wrong web root.
      # You can understand this as server_name directive in Nginx.
      # Comma separated list without spaces! Example: ADDITIONAL_SERVER_NAMES=a.b.c,d.e.f

      ADDITIONAL_SERVER_NAMES=

      # Skip running ACME (acme-mailcow, Let's Encrypt certs) - y/n

      SKIP_LETS_ENCRYPT=n

      # Create seperate certificates for all domains - y/n
      # this will allow adding more than 100 domains, but some email clients will not be able to connect with alternative hostnames
      # see https://wiki.dovecot.org/SSL/SNIClientSupport
      ENABLE_SSL_SNI=n

      # Skip IPv4 check in ACME container - y/n

      SKIP_IP_CHECK=n

      # Skip HTTP verification in ACME container - y/n

      SKIP_HTTP_VERIFICATION=n

      # Skip ClamAV (clamd-mailcow) anti-virus (Rspamd will auto-detect a missing ClamAV container) - y/n

      SKIP_CLAMD=n

      # Skip SOGo: Will disable SOGo integration and therefore webmail, DAV protocols and ActiveSync support (experimental, unsupported, not fully implemented) - y/n

      SKIP_SOGO=n

      # Skip Solr on low-memory systems or if you do not want to store a readable index of your mails in solr-vol-1.

      SKIP_SOLR=n

      # Solr heap size in MB, there is no recommendation, please see Solr docs.
      # Solr is a prone to run OOM and should be monitored. Unmonitored Solr setups are not recommended.

      SOLR_HEAP=1024

      # Allow admins to log into SOGo as email user (without any password)

      ALLOW_ADMIN_EMAIL_LOGIN=n

      # Enable watchdog (watchdog-mailcow) to restart unhealthy containers

      USE_WATCHDOG=y

      # Send watchdog notifications by mail (sent from watchdog@MAILCOW_HOSTNAME)
      # CAUTION:
      # 1. You should use external recipients
      # 2. Mails are sent unsigned (no DKIM)
      # 3. If you use DMARC, create a separate DMARC policy ("v=DMARC1; p=none;" in _dmarc.MAILCOW_HOSTNAME)
      # Multiple rcpts allowed, NO quotation marks, NO spaces

      #WATCHDOG_NOTIFY_EMAIL=a@example.com,b@example.com,c@example.com
      #WATCHDOG_NOTIFY_EMAIL=

      # Notify about banned IP (includes whois lookup)
      WATCHDOG_NOTIFY_BAN=n

      # Subject for watchdog mails. Defaults to "Watchdog ALERT" followed by the error message.
      #WATCHDOG_SUBJECT=

      # Checks if mailcow is an open relay. Requires a SAL. More checks will follow.
      # https://www.servercow.de/mailcow?lang=en
      # https://www.servercow.de/mailcow?lang=de
      # No data is collected. Opt-in and anonymous.
      # Will only work with unmodified mailcow setups.
      WATCHDOG_EXTERNAL_CHECKS=n

      # Enable watchdog verbose logging
      WATCHDOG_VERBOSE=n

      # Max log lines per service to keep in Redis logs

      LOG_LINES=9999

      # Internal IPv4 /24 subnet, format n.n.n (expands to n.n.n.0/24)
      # Use private IPv4 addresses only, see https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses

      IPV4_NETWORK=172.22.1

      # Internal IPv6 subnet in fc00::/7
      # Use private IPv6 addresses only, see https://en.wikipedia.org/wiki/Private_network#Private_IPv6_addresses

      IPV6_NETWORK=fd4d:6169:6c63:6f77::/64

      # Use this IPv4 for outgoing connections (SNAT)

      #SNAT_TO_SOURCE=

      # Use this IPv6 for outgoing connections (SNAT)

      #SNAT6_TO_SOURCE=

      # Create or override an API key for the web UI
      # You _must_ define API_ALLOW_FROM, which is a comma separated list of IPs
      # An API key defined as API_KEY has read-write access
      # An API key defined as API_KEY_READ_ONLY has read-only access
      # Allowed chars for API_KEY and API_KEY_READ_ONLY: a-z, A-Z, 0-9, -
      # You can define API_KEY and/or API_KEY_READ_ONLY

      #API_KEY=
      #API_KEY_READ_ONLY=
      #API_ALLOW_FROM=172.22.1.1,127.0.0.1

      # mail_home is ~/Maildir
      MAILDIR_SUB=Maildir

      # SOGo session timeout in minutes
      SOGO_EXPIRE_SESSION=480

      # DOVECOT_MASTER_USER and DOVECOT_MASTER_PASS must both be provided. No special chars.
      # Empty by default to auto-generate master user and password on start.
      # User expands to DOVECOT_MASTER_USER@mailcow.local
      # LEAVE EMPTY IF UNSURE
      DOVECOT_MASTER_USER=
      # LEAVE EMPTY IF UNSURE
      DOVECOT_MASTER_PASS=

      # Let's Encrypt registration contact information
      # Optional: Leave empty for none
      # This value is only used on first order!
      # Setting it at a later point will require the following steps:
      # https://mailcow.github.io/mailcow-dockerized-docs/troubleshooting/debug-reset_tls/
      ACME_CONTACT=

      # WebAuthn device manufacturer verification
      # After setting WEBAUTHN_ONLY_TRUSTED_VENDORS=y only devices from trusted manufacturers are allowed
      # root certificates can be placed for validation under mailcow-dockerized/data/web/inc/lib/WebAuthn/rootCertificates
      WEBAUTHN_ONLY_TRUSTED_VENDORS=n
    owner: 'mailcow:mailcow'
    permissions: '0640'
    defer: true

  - path: /tmp/install_mailcow.sh
    content: |
      #/bin/bash

      # Check if Mailcow is already installed
      if [ -f "/opt/mailcow/mailcow-dockerized/mailcow.conf" ]; then
        exit
      fi

      git clone https://github.com/mailcow/mailcow-dockerized /opt/mailcow/mailcow-dockerized
      cd /opt/mailcow/mailcow-dockerized

      cp -rfv /tmp/mailcow.conf /opt/mailcow/mailcow-dockerized/mailcow.conf

      docker-compose pull
      docker-compose up -d 
    owner: 'mailcow:mailcow'
    permissions: '0777'

mounts:
  - ["${log_volume_linux_device}",  "/var/log",                "ext4","discard,nofail,defaults", "0", "0"]
  - ["${mail_volume_linux_device}", "/var/lib/docker/volumes", "ext4","discard,nofail,defaults", "0", "0"]

bootcmd:
  - sudo mkfs.ext4 -F ${log_volume_linux_device}
  - sudo mkfs.ext4 -F ${mail_volume_linux_device}
  - mkdir -pv /var/lib/docker/volumes


runcmd:
  - hostname -f
  - curl -L https://github.com/docker/compose/releases/download/$(curl -Ls https://www.servercow.de/docker-compose/latest.php)/docker-compose-$(uname -s)-$(uname -m) > /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose
  - sudo -umailcow -- /usr/bin/bash /tmp/install_mailcow.sh
  - rm /tmp/install_mailcow.sh